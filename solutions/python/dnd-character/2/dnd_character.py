import random
import math

def modifier(value):
    """
    Calculates the ability modifier for a given ability score.

    The modifier is determined by the formula: floor((score - 10) / 2)

    Args:
        value (int): The ability score (typically from 3 to 18).

    Returns:
        int: The calculated modifier, which may be negative.
    """
    return math.floor((value - 10) / 2)

class Character:
    """
    Represents a Dungeons & Dragons character with six ability scores and hitpoints.

    Ability scores:
        - Strength
        - Dexterity
        - Constitution
        - Intelligence
        - Wisdom
        - Charisma

    Ability scores are generated by rolling four six-sided dice (4d6),
    discarding the lowest die, and summing the remaining three.

    Hitpoints are calculated as:
        10 + constitution modifier
    """

    def __init__(self):
        """
        Initializes a new Character instance with randomly generated abilities
        and calculates hitpoints based on the constitution modifier.
        """
        self.strength = self.ability()
        self.dexterity = self.ability()
        self.constitution = self.ability()
        self.intelligence = self.ability()
        self.wisdom = self.ability()
        self.charisma = self.ability()
        self.hitpoints = 10 + modifier(self.constitution)

    def ability(self):
        """
        Generates a single ability score using the standard D&D method:
        roll 4d6, drop the lowest, and sum the highest three.

        Returns:
            int: An ability score between 3 and 18.
        """
        rolls = [random.randint(1, 6) for _ in range(4)]  # Roll four six-sided dice
        rolls.remove(min(rolls))  # Drop the lowest roll
        return sum(rolls)  # Sum the highest three rolls
